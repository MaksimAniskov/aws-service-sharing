# Originally published at https://github.com/MaksimAniskov/aws-service-sharing
#
# MIT License
#
# Copyright (c) 2019 Maksim Aniskov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This CloudFormation template demonstrates a service-provider/service-consumer
# separation and access management on AWS leveraging Service Endpoint, shared
# services VPC and Transit Gateway.
#
# The solution demonstrates the approach touched upon by Justin Davies and
# Bhavin Desai in their brilliant session "The right AWS network architecture for
# the right reason" (NET320) https://youtu.be/Ot1kcQfUIdg?t=2288 during
# AWS re:Invent 2019. I highly recommend to watch the video.

Resources:

  # A Service VPC where our 'service' lives.
  # For sake of this example we are going to setup a simple
  # application on Elastic Beanstalk, which requires to have
  # access to the Internet. Fot that we configure a public network
  # and a NAT Gateway. In case of an completely 'private' application,
  # that stuff is not required.

  Service1VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Service1

  Service1PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Service1VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Service1-private

  Service1PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Service1VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Service1-public

  Service1IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Service1

  Service1IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Service1IGW
      VpcId: !Ref Service1VPC

  Service1NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: Service1IGWAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Service1

  Service1NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt Service1NatGatewayEIP.AllocationId
      SubnetId: !Ref Service1PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Service1

  Service1PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Service1VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Service1-public

  Service1DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Service1IGWAttachment
    Properties:
      RouteTableId: !Ref Service1PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Service1IGW

  Service1PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Service1PublicRouteTable
      SubnetId: !Ref Service1PublicSubnet

  Service1PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Service1VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Service1-private

  Service1DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Service1PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Service1NatGateway

  Service1PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Service1PrivateRouteTable
      SubnetId: !Ref Service1PrivateSubnet

  # An Elastic Beanstalk application exposing a Network Balancer

  Application:
    Type: AWS::ElasticBeanstalk::Application

  ApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref Application
      SourceBundle:
        S3Bucket: !Sub elasticbeanstalk-samples-${AWS::Region}
        S3Key: nodejs-sample-v2.zip

  ApplicationEnvironment:
    DependsOn:
      - Service1NatGateway
      - Service1IGWAttachment
      - Service1PublicSubnetRouteTableAssociation
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref Application
      Tier:
        Name: WebServer
        Type: Standard
      SolutionStackName: 64bit Amazon Linux 2018.03 v4.12.0 running Node.js
      VersionLabel: !Ref ApplicationVersion
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: t3.nano
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: network
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: aws-elasticbeanstalk-ec2-role # TODO: Create the instance profile as part of this template
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref Service1VPC
        - Namespace: aws:ec2:vpc
          OptionName: ELBScheme
          Value: internal
        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value: !Ref Service1PrivateSubnet
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Ref Service1PrivateSubnet

  Service1Endpoint:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      AcceptanceRequired: no
      NetworkLoadBalancerArns:
        - !Sub
          - arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/net/awseb-AWSEB-${id1}/${id2}
          - id1:
              !Select [
                2,
                !Split [
                  "-",
                  !Select [
                    0,
                    !Split [".", !GetAtt ApplicationEnvironment.EndpointURL],
                  ],
                ],
              ]
            id2:
              !Select [
                3,
                !Split [
                  "-",
                  !Select [
                    0,
                    !Split [".", !GetAtt ApplicationEnvironment.EndpointURL],
                  ],
                ],
              ]

  # Shared services VPC - a proxy VPC where we collect all VPC Endpoints
  # and, potentially, other resources.

  SharedServicesVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SharedServices

  SharedServicesSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SharedServicesVPC
      CidrBlock: 10.0.0.0/24

      # VPC Endpoint attaches this subnet. See VPCEndpointService1.SubnetIds below.
      # Which requires the subnet to be in the same AZ where Service Endpoint is.
      # Which requires the subnet to be in the same AZ where Service's Load Balancer is attached to.
      # See ApplicationEnvironment.OptionSettings[ELBSubnets] above.
      AvailabilityZone: !GetAtt Service1PrivateSubnet.AvailabilityZone

      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SharedServices

  VPCEndpointService1:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.vpce.${AWS::Region}.${Service1Endpoint}
      VpcId: !Ref SharedServicesVPC
      SubnetIds:
        - !Ref SharedServicesSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointService1SG

  VPCEndpointService1SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SharedServicesVPC
      GroupDescription: !Sub ${AWS::StackName} VPC Endpoint for Service1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPCEndpoint-Service1

  # A network where we want to consume the service

  ServiceConsumer1VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ServiceConsumer1

  ServiceConsumer1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServiceConsumer1VPC
      CidrBlock: 10.1.0.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ServiceConsumer1

  # Wire ServiceConsumer1's network(s) and SharedService's ones
  # by Transit Gateway's means.

  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AutoAcceptSharedAttachments: enable
      DefaultRouteTableAssociation: enable
      DefaultRouteTablePropagation: enable
      DnsSupport: enable
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  TGAttachmentSharedServices:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref SharedServicesVPC
      SubnetIds:
        - !Ref SharedServicesSubnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SharedServices

  TGAttachmentServiceConsumer1:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref ServiceConsumer1VPC
      SubnetIds:
        - !Ref ServiceConsumer1Subnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ServiceConsumer1

  SharedServicesRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SharedServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SharedServices

  SharedServicesDefaultRoute:
    DependsOn: TGAttachmentSharedServices # If the TGW is not yet attached, route creation will fail
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SharedServicesRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !Ref TransitGateway

  SharedServicesRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SharedServicesRouteTable
      SubnetId: !Ref SharedServicesSubnet

  ServiceConsumer1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ServiceConsumer1VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ServiceConsumer1

  ServiceConsumer1DefaultRoute:
    DependsOn: TGAttachmentServiceConsumer1 # If the TGW is not yet attached, route creation will fail
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ServiceConsumer1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !Ref TransitGateway

  Service1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ServiceConsumer1RouteTable
      SubnetId: !Ref ServiceConsumer1Subnet

  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref AWS::StackName
      VPCs:
        - VPCId: !Ref ServiceConsumer1VPC
          VPCRegion: !Ref AWS::Region

  Service1DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Type: A
      Name: !Sub service1.${AWS::StackName}.
      AliasTarget:
        HostedZoneId:
          !Select [
            0,
            !Split [":", !Select [1, !GetAtt VPCEndpointService1.DnsEntries]],
          ]
        DNSName:
          !Select [
            1,
            !Split [":", !Select [1, !GetAtt VPCEndpointService1.DnsEntries]],
          ]

  # Let's create a Lambda function in ServiceConsumer1's VPC
  # to test that we can reach Service1 from there.

  TestFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Handler: index.handler
      Environment:
        Variables:
          SERVICE1_URL: !Sub http://${Service1DnsRecord}
      Code:
        ZipFile: |
          const http = require('http');
          exports.handler = () => {
            http.get(
              process.env.SERVICE1_URL,
              (resp) => resp.on('data', data => console.log(data.toString())).on('error', console.error)
            );
          }
      Role: !GetAtt TestFunctionRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref ServiceConsumer1Subnet
        SecurityGroupIds:
          - !GetAtt ServiceConsumer1VPC.DefaultSecurityGroup

  TestFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
